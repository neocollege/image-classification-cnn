# -*- coding: utf-8 -*-
"""img-classification-cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_aJ2qyWkuOn7_J-PTqACfx037DdjuRAE
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
from tensorflow.keras import datasets, layers, models

(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

X_train.shape

y_train = y_train.reshape(-1,)
y_train[:5]

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def plot_sample(X,y,index):
 plt.figure(figsize=(10,2))
 plt.imshow(X[index])
 plt.xlabel(classes[y[index]])

plot_sample(X_train,y_train,0)

plot_sample(X_train, y_train, 5)

"""scaling the images"""

X_train = X_train/255.0
X_test = X_test/255.0

"""Convolutional Neural Network model"""

cnn = models.Sequential([
       layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape = (32,32,3)),
       layers.MaxPooling2D((2,2)),
       layers.Flatten(),
       layers.Dense(64, activation='relu'),
       layers.Dense(10, activation='softmax')           
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

cnn.evaluate(X_test, y_test)

y_pred = cnn.predict(X_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

from sklearn.metrics import confusion_matrix , classification_report
print("Classification Report: \n", classification_report(y_test, y_classes))

